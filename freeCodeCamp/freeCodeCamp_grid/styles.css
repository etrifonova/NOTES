/* color variables */
:root {
  --color-background: #fbf7f5;
  --color-1: #b9eed9;
  --color-2: #73d2ab;
  --color-3: #3eb488;
  --color-4: #0e4d92;
  --color-5: #269ed3;
  --color-6:  #48cbe6;
  --color-spacer: #161925;
  --color-text: white;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: Arial, Helvetica, sans-serif;
}

html, body {
  height: 100%;
  background-color: #fbf7f5;
  margin: 10px;
  color: white;
}

h1 {
    text-align: center;
    font-size: 1.25rem;
    margin-bottom: 20px;
    color: var(--color-spacer);
}

hr {
    height: 10px;
    background-color: var(--color-4);
    margin-top: 20px;
    margin-bottom: 20px;
}

.section {
  margin: 2rem 3rem;
}

.wrapper > div {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1.5rem;
  padding: 1rem 0
}

.wrapper > div:first-child,
.wrapper > div:nth-child(10) {
  background-color: var(--color-1);
}

.wrapper > div:nth-child(2),
.wrapper > div:nth-child(11) {
  background-color: var(--color-2);
}

.wrapper > div:nth-child(3),
.wrapper > div:last-child {
  background-color: var(--color-3);
}

.wrapper > div:nth-child(4),
.wrapper > div:nth-child(7) {
  background-color: var(--color-4);
}

.wrapper > div:nth-child(5),
.wrapper > div:nth-child(8) {
  background-color: var(--color-5);
}

.wrapper > div:nth-child(6),
.wrapper > div:nth-child(9) {
  background-color: var(--color-6);
}

/* container 1 */

.container-1 {
  /* there are 3 columns and 2 rows, with 3 items in each row*/
  display: grid;
  grid-template-columns: 100px auto 100px; /* left and right items take 100px of the available space, and the center item takes up all the remaining space */
  grid-template-rows: 50px 50px; /* here we're defining the height of both rows; if we set the height just for one of them, the other row will take space depending on its content */
  grid-gap: 3px; /* for delimiting */
}

/* container 1 task
1) Give the wrapper a display of grid.
2) Set 2 columns, with the first item taking 200px and the second item - the rest of space.
3) Set 3 rows, with the first item taking 150px in height, the second item - twice as much, and the third item - three times as much.
4) Set a spacing of 5px between the columns and rows.
*/


/* container 2 - using fr (fr is short for "fraction" (часть, доля)) */

.container-2 {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr; /* total of 4 fractions */
  grid-template-rows: 1fr 1fr; /* total of 2 fractions */
  grid-gap: 3px;
}

/* container 3 - using repeat for columns and rows */

.container-3 {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  /* 3 stands for how many columns there are in a row, and 1fr means how much space they take up*/
  grid-template-rows: repeat(2, 50px);
  /* 2 stands for how many rows there are in a column, and 1fr means how much space they take up*/
  grid-gap: 3px;
}

/* container 4 - using shorthand for repeat */

.container-4 {
  display: grid;
  grid-template: repeat(2, 50px) / repeat(3, 1fr);
  /* rows come first, columns come second */
  grid-gap: 3px;
}

/* container task 2
1) Give the wrapper a display of grid.
2) Using a shorthand, give the grid 3 rows with a height of 100px and 2 columns with an equal width for each column
*/

/* container 5 - navigation menu */

.container-5 {
  display: grid;
  grid-gap: 3px;
  /* grid-template-columns: repeat(12, 1fr); */
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: 40px 200px 40px;
}

.header {
  grid-column-start: 1;
  grid-column-end: 3;
  /* short-hand:
  grid-column: 1 / 3; */
  /* grid-column: 1 / -1; */
}

.footer {
  grid-column: 1 / -1;
}


/* container 6 - navigation menu with span
if grid is used for the entire page, having more columns is a good idea as it ensures more flexibility
*/

.container-6 {
  height: 100%;
  display: grid;
  grid-gap: 3px;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: 40px 200px 40px;
  /* grid-template-areas:
    "h h h h h h h h h h h h"
    "m c c c c c c c c c c c"
    "f f f f f f f f f f f f"; */
}

.container-6 > .header {
  grid-column: span 12;
  /* .header takes all the area defined as "h" */
}

.container-6 > .menu {
  grid-column: span 2;
}

.container-6 >.content {
  grid-column: span 10;
}

.container-6 > .footer {
  grid-column: span 12;
}


/* grid areas */
.container-7 {
  height: 100%;
  display: grid;
  grid-gap: 3px;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: 40px 200px 40px;
  grid-template-areas:
    ". h h h h h h h h h h ."
    "m c c c c c c c c c c c"
    ". f f f f f f f f f f . ";
    /* dots (.) stand for empty spaces */
}


.container-7 > .header {
  grid-area: h;
  /* .header takes all the area defined as "h" */
}

.container-7 > .menu {
  grid-area: m;
  /* .header takes all the area defined as "m" */
}

.container-7 >.content {
  grid-area: c;
  /* .header takes all the area defined as "c" */
}

.container-7 > .footer {
  grid-area: f;
  /* .header takes all the area defined as "f" */
}

/* container-8  */
.container-8 {
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  grid-template-rows: repeat(2, 100px);
}


/* container-9 auto-rows  */
.container-9 {
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  grid-auto-rows: 100px;
}

/* container-10 scientists  */
.container-10 > div {
  background-color: white !important;
  padding: 2rem;
}

.container-10 > div > img {
  object-fit: contain;
  width: 100%;
}

.container-10 {
  background-color: var(--color-5);
  width: 100%;
  display: grid;
  grid-gap: 1rem;
  grid-template-columns: repeat(2, 1fr);
  border: 1rem solid var(--color-5);
}

/* container-11 named lines */

/* gr */
.container-11 {
  height: 100%;
  display: grid;
  grid-gap: 3px;
  grid-template-columns: [main-start] 1fr [content-start] 5fr [content-end main-end];
  /* there are vertical (column) lines: [main-start] stands for the 1st line, [content-start] - for the 2nd line, and [content-end] - for the 3rd line; there can be several names for the same line*/
  grid-template-rows: [main-start] 40px [content-start] auto [content-end] 40px [main-end];
  /* there are 4 horizontal (row) lines */
}

.container-11 > .header {
  grid-column: [main-start] / [main-end];
  /* thanks to the use of dash (-) in main-start and main-end, we can simply use "main" */
}

.container-11 > .menu {

}

.container-11 >.content {
  /* grid-column: content-start / content-end; */
  /* grid-column: content; */
  /* it's enough to write just "content", and CSS recognizes it as the value used above thanks to the use of the "-" symbol */
  grid-column: content;
  /* we can use "grid-area" here as well  */
}

.container-11 > .footer {
  grid-column: main;
  /* grid-column: main-start / main-end; */
  /* we can't use "grid-area" here */
}

/* container-12 justify-content and align-content */

.container-12 {
  border: 1px solid black;
  height: 100%;
  min-height: 500px;
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(3, 100px);
  grid-template-rows: repeat(2, 100px);
  justify-content: space-between;
  align-content: space-between;
}

/* container-13 justify-items and align-items */
.container-13 {
  height: 100%;
  min-height: 500px;
  display: grid;
  grid-gap: 3px;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: 40px auto 40px;
  /* justify-items: stretch; */
  /* default value is stretch */
  /* justify-items: start; */
  /* justify-items: center; */
  /* justify-items: end; */
  /* align-items: stretch; */
  /* align-items: center; */
  /* align-items: start; */
  /* align-items: end; */
}

.container-13 > .header {
  grid-column: 1 / -1;
}

.container-13 > .menu {
  grid-column: 1 / 3;
}

.container-13 > .content {
  grid-column: 3 / -1;
  /* justify-self: center; */
  /* align-self: end; */
}

.container-13 > .footer {
  grid-column: 1 / -1;
}

/* auto-fit vs auto-fill */

.container-14-fit {
  border: 1px solid black;
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  grid-template-rows: 100px 100px;
}

.container-14-fill {
  border: 1px solid black;
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  /* auto-fill adds new column tracks which are empty */
  grid-template-rows: 100px 100px;
}